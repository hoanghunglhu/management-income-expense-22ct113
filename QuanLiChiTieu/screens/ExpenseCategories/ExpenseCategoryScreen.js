import React, { useState } from 'react';
import { 
  StyleSheet, 
  View, 
  Text, 
  FlatList,
  TouchableOpacity,
  Modal,
  Pressable,
  Alert
} from 'react-native';
import AddEditCategoryModal from './Custom';

const ExpenseCategoryScreen = () => {
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [customModalVisible, setCustomModalVisible] = useState(false);
  const [editingCategory, setEditingCategory] = useState(null);

  const [categories, setCategories] = useState([
    { id: '1', name: 'ƒÇn u·ªëng', color: '#FF5252', symbol: 'üçî', description: 'Chi ph√≠ ƒÉn u·ªëng h√†ng ng√†y' },
    { id: '2', name: 'Di chuy·ªÉn', color: '#448AFF', symbol: 'üöó', description: 'Chi ph√≠ di chuy·ªÉn, xƒÉng xe' },
    { id: '3', name: 'Mua s·∫Øm', color: '#9C27B0', symbol: 'üõí', description: 'Chi ph√≠ mua s·∫Øm ƒë·ªì d√πng' },
    { id: '4', name: 'Gi·∫£i tr√≠', color: '#FF9800', symbol: 'üé¨', description: 'Chi ph√≠ gi·∫£i tr√≠, xem phim' },
    { id: '5', name: 'H√≥a ƒë∆°n', color: '#607D8B', symbol: 'üìÑ', description: 'Chi ph√≠ h√≥a ƒë∆°n ƒëi·ªán n∆∞·ªõc' },
    { id: '6', name: 'Y t·∫ø', color: '#4CAF50', symbol: 'üíä', description: 'Chi ph√≠ kh√°m b·ªánh, thu·ªëc men' },
    { id: '7', name: 'Nh√† c·ª≠a', color: '#FF4081', symbol: 'üè†', description: 'Chi ph√≠ s·ª≠a ch·ªØa nh√† c·ª≠a' },
    { id: '8', name: 'Th·ªÉ thao', color: '#00BCD4', symbol: 'üèãÔ∏è', description: 'Chi ph√≠ t·∫≠p luy·ªán th·ªÉ thao' },
    { id: '9', name: 'Gi√°o d·ª•c', color: '#795548', symbol: 'üìö', description: 'Chi ph√≠ h·ªçc t·∫≠p, s√°ch v·ªü' },
    { id: '10', name: 'Qu√† t·∫∑ng', color: '#8BC34A', symbol: 'üéÅ', description: 'Chi ph√≠ mua qu√† t·∫∑ng' },
  ]);

  const handleCategoryPress = (item) => {
    setSelectedCategory(item);
    setModalVisible(true);
  };

  const handleEditCategory = () => {
    setModalVisible(false);
    setEditingCategory(selectedCategory);
    setCustomModalVisible(true);
  };

  const handleAddNewCategory = () => {
    setEditingCategory(null);
    setCustomModalVisible(true);
  };

  const handleSaveCategory = (data) => {
    if (editingCategory) {
      // C·∫≠p nh·∫≠t danh m·ª•c
      setCategories(categories.map(cat => 
        cat.id === editingCategory.id 
          ? { ...cat, name: data.name, description: data.description } 
          : cat
      ));
      Alert.alert('Th√†nh c√¥ng', 'ƒê√£ c·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng');
    } else {
      // Th√™m danh m·ª•c m·ªõi
      const newId = String(Math.max(...categories.map(cat => Number(cat.id)), 0) + 1);
      const colors = ['#FF5252', '#448AFF', '#9C27B0', '#FF9800', '#607D8B', '#4CAF50', '#FF4081', '#00BCD4', '#795548', '#8BC34A'];
      const symbols = ['üçî', 'üöó', 'üõí', 'üé¨', 'üìÑ', 'üíä', 'üè†', 'üèãÔ∏è', 'üìö', 'üéÅ', 'üíº', 'üí∞', 'üß∏', 'üëï', 'üì±'];
      
      const randomColor = colors[Math.floor(Math.random() * colors.length)];
      const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];
      
      const newCategory = {
        id: newId,
        name: data.name,
        description: data.description,
        color: randomColor,
        symbol: randomSymbol
      };
      
      setCategories([...categories, newCategory]);
      Alert.alert('Th√†nh c√¥ng', 'ƒê√£ th√™m danh m·ª•c th√†nh c√¥ng');
    }
  };

  const handleDeleteCategory = () => {
    Alert.alert(
      'X√°c nh·∫≠n x√≥a',
      'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a danh m·ª•c n√†y?',
      [
        {
          text: 'H·ªßy',
          style: 'cancel',
        },
        {
          text: 'X√≥a',
          onPress: () => {
            setCategories(categories.filter(cat => cat.id !== selectedCategory.id));
            setModalVisible(false);
            Alert.alert('Th√†nh c√¥ng', 'ƒê√£ x√≥a danh m·ª•c th√†nh c√¥ng');
          },
          style: 'destructive',
        },
      ],
      { cancelable: false }
    );
  };

  const renderCategoryItem = ({ item }) => (
    <TouchableOpacity 
      style={styles.categoryItem}
      onPress={() => handleCategoryPress(item)}
    >
      <View style={[styles.iconContainer, { backgroundColor: item.color }]}>
        <Text style={styles.symbolText}>{item.symbol}</Text>
      </View>
      <Text style={styles.categoryName}>{item.name}</Text>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Danh M·ª•c Chi</Text>
      </View>

      <FlatList
        data={categories}
        renderItem={renderCategoryItem}
        keyExtractor={item => item.id}
        contentContainerStyle={styles.list}
        ListHeaderComponent={
          <TouchableOpacity 
            style={styles.addNewButton}
            onPress={handleAddNewCategory}
          >
            <Text style={styles.addNewButtonText}>+ Th√™m m·ªõi nh√≥m ph√¢n lo·∫°i</Text>
          </TouchableOpacity>
        }
      />

      {/* Modal Chi ti·∫øt danh m·ª•c */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => {
          setModalVisible(!modalVisible);
        }}
      >
        <View style={styles.centeredView}>
          <View style={styles.modalView}>
            {selectedCategory && (
              <>
                <View style={styles.modalHeader}>
                  <View style={[styles.modalIconContainer, { backgroundColor: selectedCategory.color }]}>
                    <Text style={styles.modalSymbol}>{selectedCategory.symbol}</Text>
                  </View>
                  <Text style={styles.modalTitle}>{selectedCategory.name}</Text>
                </View>
                
                <View style={styles.modalContent}>
                  <Text style={styles.modalDescription}>
                    {selectedCategory.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
                  </Text>
                  
                  <View style={styles.statisticsContainer}>
                    <View style={styles.statisticsItem}>
                      <Text style={styles.statisticsValue}>0ƒë</Text>
                      <Text style={styles.statisticsLabel}>Th√°ng n√†y</Text>
                    </View>
                    
                    <View style={styles.statisticsItem}>
                      <Text style={styles.statisticsValue}>0ƒë</Text>
                      <Text style={styles.statisticsLabel}>Trung b√¨nh/th√°ng</Text>
                    </View>
                  </View>
                </View>
                
                <View style={styles.actionButtonsContainer}>
                  <Pressable
                    style={[styles.button, styles.buttonEdit]}
                    onPress={handleEditCategory}
                  >
                    <Text style={styles.textStyle}>Ch·ªânh s·ª≠a</Text>
                  </Pressable>
                  
                  <Pressable
                    style={[styles.button, styles.buttonDelete]}
                    onPress={handleDeleteCategory}
                  >
                    <Text style={styles.textStyle}>X√≥a</Text>
                  </Pressable>
                  
                  <Pressable
                    style={[styles.button, styles.buttonClose]}
                    onPress={() => setModalVisible(!modalVisible)}
                  >
                    <Text style={styles.textStyle}>ƒê√≥ng</Text>
                  </Pressable>
                </View>
              </>
            )}
          </View>
        </View>
      </Modal>

      {/* Modal th√™m/s·ª≠a danh m·ª•c */}
      <AddEditCategoryModal
        visible={customModalVisible}
        onClose={() => setCustomModalVisible(false)}
        onSave={handleSaveCategory}
        initialData={editingCategory}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
    paddingTop: 30, // Th√™m padding top ƒë·ªÉ tr√°nh status bar
  },
  header: {
    padding: 16,
    backgroundColor: '#3F51B5',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: 'white',
  },
  list: {
    padding: 16,
  },
  categoryItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    backgroundColor: 'white',
    borderRadius: 8,
    marginBottom: 12,
    elevation: 2,
  },
  iconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    marginRight: 16,
    justifyContent: 'center',
    alignItems: 'center',
  },
  symbolText: {
    fontSize: 18,
  },
  categoryName: {
    fontSize: 16,
    flex: 1,
  },
  // Modal styles
  centeredView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalView: {
    width: '85%',
    backgroundColor: 'white',
    borderRadius: 10,
    padding: 20,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
    width: '100%',
  },
  modalIconContainer: {
    width: 50,
    height: 50,
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  modalSymbol: {
    fontSize: 24,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  modalContent: {
    width: '100%',
    marginBottom: 20,
  },
  modalDescription: {
    fontSize: 16,
    marginBottom: 15,
    color: '#666',
  },
  statisticsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
    marginTop: 10,
  },
  statisticsItem: {
    alignItems: 'center',
    flex: 1,
    padding: 10,
    backgroundColor: '#f8f8f8',
    borderRadius: 8,
    margin: 5,
  },
  statisticsValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#3F51B5',
  },
  statisticsLabel: {
    fontSize: 12,
    color: '#666',
    marginTop: 5,
  },
  actionButtonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
  },
  button: {
    borderRadius: 20,
    padding: 10,
    elevation: 2,
    flex: 1,
    margin: 5,
  },
  buttonEdit: {
    backgroundColor: '#FF9800',
  },
  buttonDelete: {
    backgroundColor: '#DC3545',
  },
  buttonClose: {
    backgroundColor: '#3F51B5',
  },
  textStyle: {
    color: 'white',
    fontWeight: 'bold',
    textAlign: 'center',
  },
  addNewButton: {
    backgroundColor: '#3F51B5',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 16,
  },
  addNewButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
});

export default ExpenseCategoryScreen;